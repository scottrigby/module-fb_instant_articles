<?php
/**
 * @file
 * Facebook Instant Articles core functions.
 */

/**
 * Implements hook_menu().
 */
function fb_instant_articles_menu() {
  // Top level configuration page.
  $items['admin/config/services/fb-instant-articles'] = array(
    'title' => 'Facebook Instant Articles',
    'description' => 'Settings related to Facebook Instant Articles.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fb_instant_articles_permission() {
  $permissions = array();

  $permissions['administer fb_instant_articles'] = array(
    'title' => t('Administer Facebook Instant Articles'),
  );
  return $permissions;
}

/**
 * Implements hook_help().
 */
function fb_instant_articles_help($path, $arg) {
  $output = '';

  switch ($path) {
    // Main module help for the block module.
    case 'admin/help#fb_instant_articles':
      $filepath = dirname(__FILE__) . '/README.txt';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      $output = '<pre>' . $readme . '</pre>';
      break;

  }
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function fb_instant_articles_form_node_type_form_alter(&$form, &$form_state) {
  // Add a vertical tab to the node type form.
  if (user_access('administer fb_instant_articles')) {
    // Build fieldset for vertical tab section.
    $fieldset = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook Instant Articles'),
      '#description' => t('Configure content type for Facebook Instant Article mappings.'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    // Has the section already been created (perhaps by a sub module)?
    if (isset($form['fb_instant_articles'])) {
      // Add additional fieldset data.
      $form['fb_instant_articles'] += $fieldset;
    }
    // Else, create the fieldset.
    else {
      $form['fb_instant_articles'] = $fieldset;
    }

    // Is an Article type?
    $type = $form['#node_type']->type;
    $fb_instant_enabled = fb_instant_articles_is_article_type('node', $type);

    // Previously checked the product checkbox?
    $previously_checked = (isset($form_state['values']) && $form_state['values']['fb_instant_articles']['fb_instant_enabled']);

    // Build the product checkbox.
    $form['fb_instant_articles']['fb_instant_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Include Content Type in Facebook Instant Articles feed.'),
      '#description' => t('Enable content of this type to be included in the Facebook Instant Articles feed.'),
      '#weight' => 0,
      '#default_value' => ($previously_checked || $fb_instant_enabled) ? TRUE : FALSE,
    );

    // Add custom submit.
    $form['#submit'][] = 'fb_instant_articles_node_type_form_submit';
  }
}

/**
 * Submit callback for node type form.
 */
function fb_instant_articles_node_type_form_submit($form, &$form_state) {
  $fb_instant_enabled = fb_instant_articles_is_article_type('node', $form['#node_type']->type);
  if (!$fb_instant_enabled && $form_state['values']['fb_instant_enabled']) {
    // Save the new article type.
    fb_instant_articles_set_entity_type('node', $form['#node_type']->type);
    ctools_include('export');
    ctools_export_crud_enable('fb_instant_articles_layout_settings', 'node|article|fb_instant_article');
  }
  // Delete existing settings.
  elseif (!$form_state['values']['fb_instant_enabled']) {
    fb_instant_articles_delete_entity_type('node', $form['#node_type']->type);
  }
}

/**
 * Boolean check to see if a given entity type and bundle are a product type.
 *
 * @param string $entity_type
 *   The entity type name.
 * @param string $bundle
 *   The entity bundle name.
 *
 * @return bool
 *   Boolean TRUE or FALSE.
 */
function fb_instant_articles_is_article_type($entity_type, $bundle) {
  $is_type = FALSE;
  // Get array of entity types and bundles that are product types.
  if ($types = fb_instant_articles_get_article_entity_types()) {
    // See if this entity type and bundle exists.
    if (isset($types[$entity_type]) && isset($types[$entity_type][$bundle])) {
      $is_type = TRUE;
    }
  }
  // Allow other modules to alter.
  drupal_alter('fb_instant_articles_is_article_type', $is_type, $entity_type, $bundle);

  return $is_type;
}

/**
 * Boolean check to see if a given entity id is a product type.
 *
 * @param string $entity_id
 *   The entity id.
 *
 * @return bool
 *   Boolean TRUE or FALSE.
 */
function fb_instant_articles_is_article($entity_id) {
  $is_type = FALSE;
  $results = db_select('fb_instant_articles_entity_settings', 'fiaes')
    ->fields('fiaes', array('fia_enabled'))
    ->condition('entity_id', $entity_id)
    ->execute();
  if (!$results->rowCount()) {
    $is_type = variable_get('fb_instant_articles_all_enabled_default', TRUE);
  }
  else {
    $is_type = $results->fetch()->fia_enabled;
  }
  // Allow other modules to alter.
  drupal_alter('fb_instant_articles_is_article', $is_type, $entity_id);

  return $is_type;
}

/**
 * Return an array of entity types that are treated as products.
 *
 * @return mixed
 *   Array of entity types and bundles.
 */
function fb_instant_articles_get_article_entity_types() {
  $entity_types = &drupal_static(__FUNCTION__);
  // Entity types not retrieved yet?
  if (!isset($entity_types)) {
    $results = db_select('fb_instant_articles_entity_types', 'fbaet')
      ->fields('fbaet')
      ->execute();
    // Loop through each of the retrieved entity types.
    foreach ($results as $result) {
      $entity_types[$result->entity_type][$result->entity_bundle] = array(
        'type' => $result->entity_type,
        'bundle' => $result->entity_bundle,
      );
    }
    // Allow other modules to alter.
    drupal_alter('fb_instant_articles_entity_types', $entity_types);
  }
  return $entity_types;
}

/**
 * Save the product id field for an entity type.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 */
function fb_instant_articles_set_entity_type($type, $bundle) {
  db_insert('fb_instant_articles_entity_types')
    ->fields(array(
      'entity_type' => $type,
      'entity_bundle' => $bundle,
    ))
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('fb_instant_articles_set_type', $type, $bundle);
}

/**
 * Delete the field set to be used as the product id for entity.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 */
function fb_instant_articles_delete_entity_type($type, $bundle) {
  db_delete('fb_instant_articles_entity_types')
    ->condition('entity_type', $type)
    ->condition('entity_bundle', $bundle)
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('fb_instant_articles_delete_type', $type, $bundle);
}

/**
 * Implements hook_entity_info_alter().
 */
function fb_instant_articles_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['fb_instant_article'] = array(
    'label' => t('Facebook Instant Articles'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_html_head_alter().
 */
function fb_instant_articles_html_head_alter(&$head_elements) {
  if (drupal_is_front_page()) {
    $tag_content = variable_get('fb_instant_articles_page_id', NULL);

    if (!empty($tag_content)) {
      $head_elements['fb_instant_articles_page'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'property' => 'fb:pages',
          'content' => $tag_content,
        ),
      );
      drupal_add_html_head($head_elements, 'fb_instant_articles_page');
    }
  }
}


/**
 * Implements hook_preprocess_node().
 */
function fb_instant_articles_preprocess_node(&$vars) {

  if ($vars['view_mode'] == 'fb_instant_article') {

    $layout_settings = fb_instant_articles_get_node_layout_settings($vars['type']);

    // If no regions are set, return early.
    if (empty($layout_settings->settings['regions'])) {
      return;
    }

    $regions = $layout_settings->settings['regions'];

    foreach ($regions as $region => $fields) {
      foreach ($fields as $field) {

        if (!isset($vars['content'][$field])) {
          continue;
        }

        $field_array = $vars['content'][$field];

        // TODO: Make title field format configurable.
        if ($field == 'title') {
          $field_array = array(
            '#markup' => '<h1>' . $vars['title'] . '</h1>',
          );
        }

        $vars['fb_instant_article_' . $region][$field] = $field_array;
      }
    }

    // Set the style of the article from configuration.
    $vars['fb_instant_article_style'] = variable_get('fb_instant_articles_style', 'default');

    $vars['canonical_url'] = url('node/' . $vars['nid'], array('absolute' => TRUE));
    $vars['published'] = fb_instant_articles_time_element($vars['created'], 'op-published');
    $vars['modified'] = fb_instant_articles_time_element($vars['changed'], 'op-modified');

    $vars['theme_hook_suggestions'][] = 'node__fb_instant_article';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function fb_instant_articles_preprocess_field(&$vars) {
  $element = $vars['element'];
  if ($element['#view_mode'] == 'fb_instant_article') {
    $vars['theme_hook_suggestions'][] = 'field__fb_instant_article';
  }
}

/**
 * Implements hook_theme().
 */
function fb_instant_articles_theme() {
  $theme_path = drupal_get_path('module', 'fb_instant_articles') . '/theme';
  return array(
    'node__fb_instant_article' => array(
      'template' => 'node--fb-instant-article',
      'path' => $theme_path,
      'render element' => 'elements',
    ),
    'field__fb_instant_article' => array(
      'template' => 'field--fb-instant-article',
      'path' => $theme_path,
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function fb_instant_articles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_display_overview_form') {
    if ($form['#view_mode'] == 'fb_instant_article') {
      form_load_include($form_state, 'inc', 'fb_instant_articles', 'includes/view_mode_layout');
      fb_instant_articles_layout_form($form, $form_state);
    }
    else {
      fb_instant_articles_cleanup_view_mode_formatters($form);
    }
  }
  elseif (strpos($form_id, '_node_form') !== FALSE) {
    // If this is a node add/edit form.
    $entity_types = fb_instant_articles_get_article_entity_types();
    // If no entity types are defined for instant articles, return early.
    if (empty($entity_types)) {
      return;
    }
    foreach ($entity_types as $entity_type => $bundles) {
      foreach ($bundles as $bundle_type => $bundle) {
        $form_name = $bundle_type . '_node_form';
        if ($form_id == $form_name) {
          // Add the module's form settings to this individual node's form.
          // Add a vertical tab to the node type form.
          if (user_access('administer fb_instant_articles')) {
            // Build fieldset for vertical tab section.
            $fieldset = array(
              '#type' => 'fieldset',
              '#title' => t('Facebook Instant Articles'),
              '#description' => t('Configure entity for Facebook Instant Article mappings.'),
              '#group' => 'additional_settings',
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
            );

            // Has the section already been created (perhaps by a sub module)?
            if (isset($form['fb_instant_articles'])) {
              // Add additional fieldset data.
              $form['fb_instant_articles'] += $fieldset;
            }
            // Else, create the fieldset.
            else {
              $form['fb_instant_articles'] = $fieldset;
            }

            // Is an Article?
            $type = $form['#node']->type;
            $fb_instant_enabled = fb_instant_articles_is_article($form['#node']->nid);

            // Previously checked the product checkbox?
            $previously_checked = (isset($form_state['values']) && $form_state['values']['fb_instant_articles']['fb_instant_enabled']);

            // Build the product checkbox.
            $form['fb_instant_articles']['fb_instant_enabled'] = array(
              '#type' => 'checkbox',
              '#title' => t('Include entity in Facebook Instant Articles feed.'),
              '#description' => t('Enable this entity to be included in the Facebook Instant Articles feed.'),
              '#weight' => 0,
              '#default_value' => ($previously_checked || $fb_instant_enabled) ? TRUE : FALSE,
            );

            // Add custom submit.
            $form['#submit'][] = 'fb_instant_articles_node_form_submit';
          }
          // Since only one node add/edit form can (probably?) be loaded on a
          // page at a time, we can break out of this loop.
          break;
        }
      }
    }
  }
}

/**
 * Submit callback for node form.
 */
function fb_instant_articles_node_form_submit($form, &$form_state) {
  $fb_instant_enabled = fb_instant_articles_is_article_type('node', $form['type']['#value']);
  if ($fb_instant_enabled) {
    if (!isset($form_state['values']['fb_instant_enabled'])) {
      $form_state['values']['fb_instant_enabled'] = 0;
    }
    $value = $form_state['values']['fb_instant_enabled'];
    $default_enabled = variable_get('fb_instant_articles_all_enabled_default', TRUE);
    if ($default_enabled xor $value) {
      // Save the new article entity setting if the value is different from the
      // default value.
      fb_instant_articles_set_entity($form['nid']['#value'], $value);
    }
    else {
      // Otherwise if the value and default value are the same, delete the entry
      // to keep the table clean.
      fb_instant_articles_delete_entity($form['nid']['#value']);
    }
  }
}

/**
 * Save the product id field for an entity.
 *
 * @param int $id
 *   The entity id.
 */
function fb_instant_articles_set_entity($id, $enabled) {
  db_merge('fb_instant_articles_entity_settings')
    ->key(array('entity_id' => $id))
    ->fields(array(
      'entity_id' => $id,
      'fia_enabled' => $enabled,
    ))
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('fb_instant_articles_set_entity', $id, $enabled);
}

/**
 * Delete the field set to be used as the product id for entity.
 *
 * @param string $id
 *   The entity id.
 */
function fb_instant_articles_delete_entity($id) {
  db_delete('fb_instant_articles_entity_settings')
    ->condition('entity_id', $id)
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('fb_instant_articles_delete_entity', $id);
}

/**
 * Get the layout settings for a specific bundle.
 */
function fb_instant_articles_get_node_layout_settings($bundle_name) {
  ctools_include('export');
  $export_id = 'node|' . $bundle_name . '|fb_instant_article';

  $layout_settings = ctools_export_crud_load_all('fb_instant_articles_layout_settings');

  $layout = new stdClass();
  if (isset($layout_settings[$export_id])) {
    $layout = $layout_settings[$export_id];
  }
  return $layout;
}

/**
 * Implements hook_field_formatter_info().
 */
function fb_instant_articles_field_formatter_info() {
  $formats = array();
  $formats['fbia_subtitle_formatter'] = array(
    'label' => t('FBIA Subtitle'),
    'field types' => array('text', 'text_with_summary'),
  );
  $formats['fbia_kicker_formatter'] = array(
    'label' => t('FBIA Kicker'),
    'field types' => array('text', 'text_with_summary'),
  );
  $formats['fbia_blockquote_formatter'] = array(
    'label' => t('FBIA Blockquote'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
  );
  $formats['fbia_pullquote_formatter'] = array(
    'label' => t('FBIA Pullquote'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
  );
  $formats['fbia_social_formatter'] = array(
    'label' => t('FBIA Social Embed'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
  );
  $formats['fbia_credits_formatter'] = array(
    'label' => t('FBIA Credits'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
  );
  $formats['fbia_copyright_formatter'] = array(
    'label' => t('FBIA Copyright'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
  );
  $formats['fbia_author_formatter'] = array(
    'label' => t('FBIA Author'),
    'field types' => array('text', 'text_with_summary', 'list_text'),
  );
  $formats['fbia_video_formatter'] = array(
    'label' => t('FBIA Video'),
    'field types' => array('file'),
  );
  $formats['fbia_ad_formatter'] = array(
    'label' => t('FBIA Ad'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
    'settings'  => array(
      'height' => '50',
      'width' => '320',
      'source' => 'url',
    ),
  );
  $formats['fbia_analytics_formatter'] = array(
    'label' => t('FBIA Analytics'),
    'field types' => array('text', 'text_long', 'text_with_summary'),
    'settings'  => array(
      'source' => 'url',
    ),
  );
  $formats['fbia_image_formatter'] = array(
    'label' => t('FBIA Image'),
    'field types' => array('image'),
    'settings'  => array(
      'style' => 'medium',
      'caption' => '',
      'likes' => '',
      'comments' => '',
      'fullscreen' => '',
    ),
  );
  $formats['fbia_interactive_formatter'] = array(
    'label' => t('FBIA Interactive'),
    'field types' => array('text', 'text_with_summary'),
    'settings'  => array(
      'height' => '50',
      'width' => 'no-margin',
    ),
  );
  $formats['fbia_list_formatter'] = array(
    'label' => t('FBIA List'),
    'field types' => array('list_text', 'list_integer', 'list_float'),
    'settings'  => array(
      'list_type' => 'ol',
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function fb_instant_articles_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {

    case 'fbia_ad_formatter':
      $element['source'] = array(
        '#type' => 'select',
        '#title' => t('Source'),
        '#description' => t('Add your ad specifying the URL or embed the full unescaped HTML.'),
        '#default_value'  => $settings['source'],
        '#options' => array(
          'url'  => t('Ad URL'),
          'embed' => t('Embedded HTML'),
        ),
      );
      $element['height'] = array(
        '#type' => 'textfield',
        '#title' => t('Height'),
        '#description' => t('Height of the iframe element.'),
        '#default_value' => $settings['height'],
      );
      $element['width'] = array(
        '#type' => 'textfield',
        '#title' => t('Width'),
        '#description' => t('Width of the iframe element.'),
        '#default_value' => $settings['width'],
      );
      break;

    case 'fbia_interactive_formatter':
      $element['height'] = array(
        '#type' => 'textfield',
        '#title' => t('Height'),
        '#description' => t('The height of your interactive graphic.'),
        '#default_value' => $settings['height'],
      );

      $element['width'] = array(
        '#type' => 'select',
        '#title' => t('Width'),
        '#description' => t('The width of your interactive graphic.'),
        '#default_value' => $settings['width'],
        '#options' => array(
          'no-margin' => t('no-margin'),
          'column-width' => t('column-width'),
        ),
      );
      break;

    case 'fbia_list_formatter':
      $element['list_type'] = array(
        '#type' => 'select',
        '#title' => t('List Type'),
        '#description' => t('Choose list type.'),
        '#default_value' => $settings['list_type'],
        '#options' => array(
          'ol' => t('Ordered'),
          'ul' => t('Unordered'),
        ),
      );
      break;

    case 'fbia_image_formatter':
      $styles = image_styles();
      $options = array();
      foreach ($styles as $style_key => $style) {
        $options[$style_key] = $style['label'];
      }
      $element['style'] = array(
        '#type' => 'select',
        '#title' => t('Style'),
        '#description' => t('The style of the image.'),
        '#default_value' => $settings['style'],
        '#options' => $options,
      );
      $element['caption'] = array(
        '#type' => 'checkbox',
        '#description' => t('The caption uses the alt text of the image field.'),
        '#title' => t('Enable caption.'),
        '#default_value' => $settings['caption'],
      );
      $element['likes'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Facebook Likes. (data-feedback)'),
        '#default_value' => $settings['likes'],
      );
      $element['comments'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Facebook Comments. (data-feedback)'),
        '#default_value' => $settings['comments'],
      );
      $element['fullscreen'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Fullscreen.'),
        '#default_value' => $settings['fullscreen'],
      );
      break;

    case 'fbia_analytics_formatter':
      $element['source'] = array(
        '#type' => 'select',
        '#title' => t('Source'),
        '#description' => t('Add your tracker specifying the URL or embed the full unescaped HTML.'),
        '#default_value'  => $settings['source'],
        '#options' => array(
          'url' => t('Ad URL'),
          'embed' => t('Embedded HTML'),
        ),
      );
      break;

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function fb_instant_articles_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  switch ($display['type']) {
    case 'fbia_ad_formatter':
      $summary = t('Ad field - set the Source, iFrame height (@height) and width (@width).', array(
        '@height' => $settings['height'],
        '@width' => $settings['width'],
      ));
      break;

    case 'fbia_interactive_formatter':
      $summary = t('Interactive field - set iFrame height (@height) and width (@width).', array(
        '@height' => $settings['height'],
        '@width' => $settings['width'],
      ));
      break;

    case 'fbia_analytics_formatter':
      $summary = t('Analytics field - set the Source of the iframe. (@source)', array(
        '@source' => $settings['source'],
      ));
      break;

    case 'fbia_image_formatter':
      $summary = t('Image field - Style:(@style)', array(
        '@style' => $settings['style'],
      ));
      break;

    case 'fbia_list_formatter':
      $summary = t('List field - Type:(@list_type)', array(
        '@list_type' => $settings['list_type'],
      ));
      break;
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function fb_instant_articles_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  module_load_include('inc', 'fb_instant_articles', 'includes/elements');
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {

    case 'fbia_subtitle_formatter':
      $element = fb_instant_articles_field_format_standard_element($items, 'h2');
      break;

    case 'fbia_kicker_formatter':
      $element = fb_instant_articles_field_format_standard_element($items, 'h3', 'op-kicker');
      break;

    case 'fbia_blockquote_formatter':
      $element = fb_instant_articles_field_format_standard_element($items, 'blockquote');
      break;

    case 'fbia_author_formatter':
      $element = fb_instant_articles_field_format_standard_element($items, 'address');
      break;

    case 'fbia_credits_formatter':
    case 'fbia_pullquote_formatter':
      $element = fb_instant_articles_field_format_standard_element($items, 'aside');
      break;

    case 'fbia_copyright_formatter':
      $element = fb_instant_articles_field_format_standard_element($items, 'small');
      break;

    case 'fbia_ad_formatter':
      $element = fb_instant_articles_field_format_ad_element($items, $settings);
      break;

    case 'fbia_analytics_formatter':
      $element = fb_instant_articles_field_format_analytics_element($items, $settings);
      break;

    case 'fbia_video_formatter':
      $element = fb_instant_articles_field_format_video_element($items, $settings);
      break;

    case 'fbia_image_formatter':
      $element = fb_instant_articles_field_format_image_element($items, $settings);
      break;

    case 'fbia_interactive_formatter':
      $element = fb_instant_articles_field_format_interactive_element($items, $settings);
      break;

    case 'fbia_list_formatter':
      $element = fb_instant_articles_field_format_list_element($items, $settings);
      break;

    case 'fbia_social_formatter':
      $element = fb_instant_articles_field_format_social_element($items, $settings);
      break;
  }

  return $element;
}

/**
 * Remove formatters from view modes which are not Facebook Instant Articles.
 */
function fb_instant_articles_cleanup_view_mode_formatters(&$form) {
  foreach ($form['fields'] as $field_key => $field) {
    if (strpos($field_key, '#') === FALSE) {
      foreach ($field['format']['type']['#options'] as $format_key => $format) {
        if (strpos($format_key, 'fbia') !== FALSE) {
          unset($form['fields'][$field_key]['format']['type']['#options'][$format_key]);
        }
      }
    }
  }
}

/**
 * Format time elements.
 */
function fb_instant_articles_time_element($timestamp, $class) {
  $class = ' class="' . $class . '"';

  $date = new DateTime("@$timestamp");
  $datetime = ' datetime="' . $date->format(DateTime::ATOM) . '"';
  $text_time = $date->format('F jS, g:i A');
  $element = '<time' . $class . $datetime . '>' . $text_time . '</time>';

  return $element;
}
